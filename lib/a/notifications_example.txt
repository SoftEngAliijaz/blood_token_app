Add Firebase Cloud Messaging to Your Project:

Follow the Firebase setup instructions for Flutter: https://firebase.flutter.dev/docs/overview/
Enable Cloud Messaging in your Firebase console.
Update pubspec.yaml:
Add the following dependencies to your pubspec.yaml file:

yaml
Copy code
dependencies:
  flutter:
    sdk: flutter
  firebase_core: latest_version
  firebase_messaging: latest_version
  cloud_firestore: latest_version
  firebase_auth: latest_version
Initialize Firebase:
Initialize Firebase in your main.dart file:

dart
Copy code
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: AddRequestScreen(),
    );
  }
}
Configure Firebase Messaging:
Set up Firebase Messaging to handle foreground, background, and terminated states:

dart
Copy code
import 'package:firebase_messaging/firebase_messaging.dart';

class AddRequestScreen extends StatefulWidget {
  const AddRequestScreen({super.key});

  @override
  _AddRequestScreenState createState() => _AddRequestScreenState();
}

class _AddRequestScreenState extends State<AddRequestScreen> {
  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;

  @override
  void initState() {
    super.initState();

    // Request notification permissions for iOS
    _firebaseMessaging.requestPermission();

    // Handle foreground messages
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      if (message.notification != null) {
        // Show a notification dialog or a toast
        showDialog(
          context: context,
          builder: (context) => AlertDialog(
            title: Text(message.notification!.title ?? 'Notification'),
            content: Text(message.notification!.body ?? 'No message'),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: Text('OK'),
              ),
            ],
          ),
        );
      }
    });

    // Handle background and terminated messages
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      if (message.notification != null) {
        // Navigate to a specific screen based on the notification
      }
    });
  }

  // ... rest of your existing code
}
Send Notifications on Data Addition:
Modify _submitForm method to send a notification when a new request is added:

dart
Copy code
void _submitForm() async {
  if (_formKey.currentState!.validate()) {
    setState(() {
      _isLoading = true; // Start loading
    });

    BloodRequestModel bloodRequestObject = BloodRequestModel(
      docId: '',
      uid: FirebaseAuth.instance.currentUser!.uid,
      requesterName: _requesterNameController.text,
      patientName: _patientNameController.text,
      bloodType: _bloodTypeController.text,
      quantityNeeded: _quantityNeededController.text,
      urgencyLevel: _urgencyLevelController.text,
      location: _locationController.text,
      contactNumber: _contactNumberController.text,
      timestamp: DateTime.now(),
      customLocation: _customLocation.text,
      latitude: _initialCameraPosition.latitude,
      longitude: _initialCameraPosition.longitude,
    );

    try {
      DocumentReference docRef = await FirebaseFirestore.instance
          .collection('blood_requests')
          .add(bloodRequestObject.toJson());

      String docId = docRef.id;
      bloodRequestObject = bloodRequestObject.copyWith(docId: docId);
      await docRef.update({'docId': docId});

      await _sendNotification(bloodRequestObject);

      Fluttertoast.showToast(msg: 'Blood request submitted successfully');
      _resetForm();
    } catch (e) {
      print('Error submitting blood request: $e');
      Fluttertoast.showToast(
          msg: 'Failed to submit blood request. Error: $e');
    } finally {
      setState(() {
        _isLoading = false; // Stop loading regardless of success or failure
      });
    }
  }
}

Future<void> _sendNotification(BloodRequestModel bloodRequestObject) async {
  final message = {
    'notification': {
      'title': 'New Blood Request',
      'body': 'A new blood request for ${bloodRequestObject.bloodType} is added.',
    },
    'priority': 'high',
    'data': {
      'click_action': 'FLUTTER_NOTIFICATION_CLICK',
      'id': bloodRequestObject.docId,
      'status': 'done',
    },
    'to': '/topics/all', // Send to a topic subscribed by all users
  };

  try {
    final response = await http.post(
      Uri.parse('https://fcm.googleapis.com/fcm/send'),
      headers: <String, String>{
        'Content-Type': 'application/json',
        'Authorization': 'key=YOUR_SERVER_KEY', // Replace with your FCM server key
      },
      body: jsonEncode(message),
    );

    if (response.statusCode == 200) {
      print('Notification sent successfully');
    } else {
      print('Failed to send notification');
    }
  } catch (e) {
    print('Error sending notification: $e');
  }
}
Subscribe Users to a Topic:
Subscribe users to a topic to receive notifications:

dart
Copy code
@override
void initState() {
  super.initState();
  _firebaseMessaging.subscribeToTopic('all');
}


With these steps, your app will send a notification to all users subscribed to the topic all whenever a new blood request is added. Ensure to replace YOUR_SERVER_KEY with your actual Firebase Cloud Messaging server key from the Firebase console.